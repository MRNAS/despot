// Generated by gencpp from file laser_tag/TagActionObsResponse.msg
// DO NOT EDIT!


#ifndef LASER_TAG_MESSAGE_TAGACTIONOBSRESPONSE_H
#define LASER_TAG_MESSAGE_TAGACTIONOBSRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace laser_tag
{
template <class ContainerAllocator>
struct TagActionObsResponse_
{
  typedef TagActionObsResponse_<ContainerAllocator> Type;

  TagActionObsResponse_()
    : observations()
    , tag_success(false)  {
    }
  TagActionObsResponse_(const ContainerAllocator& _alloc)
    : observations(_alloc)
    , tag_success(false)  {
  (void)_alloc;
    }



   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _observations_type;
  _observations_type observations;

   typedef uint8_t _tag_success_type;
  _tag_success_type tag_success;





  typedef boost::shared_ptr< ::laser_tag::TagActionObsResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::laser_tag::TagActionObsResponse_<ContainerAllocator> const> ConstPtr;

}; // struct TagActionObsResponse_

typedef ::laser_tag::TagActionObsResponse_<std::allocator<void> > TagActionObsResponse;

typedef boost::shared_ptr< ::laser_tag::TagActionObsResponse > TagActionObsResponsePtr;
typedef boost::shared_ptr< ::laser_tag::TagActionObsResponse const> TagActionObsResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::laser_tag::TagActionObsResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::laser_tag::TagActionObsResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::laser_tag::TagActionObsResponse_<ContainerAllocator1> & lhs, const ::laser_tag::TagActionObsResponse_<ContainerAllocator2> & rhs)
{
  return lhs.observations == rhs.observations &&
    lhs.tag_success == rhs.tag_success;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::laser_tag::TagActionObsResponse_<ContainerAllocator1> & lhs, const ::laser_tag::TagActionObsResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace laser_tag

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::laser_tag::TagActionObsResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::laser_tag::TagActionObsResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::laser_tag::TagActionObsResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::laser_tag::TagActionObsResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::laser_tag::TagActionObsResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::laser_tag::TagActionObsResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::laser_tag::TagActionObsResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6c2efacbd043e599c296a1af1272be32";
  }

  static const char* value(const ::laser_tag::TagActionObsResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6c2efacbd043e599ULL;
  static const uint64_t static_value2 = 0xc296a1af1272be32ULL;
};

template<class ContainerAllocator>
struct DataType< ::laser_tag::TagActionObsResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "laser_tag/TagActionObsResponse";
  }

  static const char* value(const ::laser_tag::TagActionObsResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::laser_tag::TagActionObsResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32[] observations \n"
"bool tag_success\n"
"\n"
;
  }

  static const char* value(const ::laser_tag::TagActionObsResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::laser_tag::TagActionObsResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.observations);
      stream.next(m.tag_success);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TagActionObsResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::laser_tag::TagActionObsResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::laser_tag::TagActionObsResponse_<ContainerAllocator>& v)
  {
    s << indent << "observations[]" << std::endl;
    for (size_t i = 0; i < v.observations.size(); ++i)
    {
      s << indent << "  observations[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.observations[i]);
    }
    s << indent << "tag_success: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.tag_success);
  }
};

} // namespace message_operations
} // namespace ros

#endif // LASER_TAG_MESSAGE_TAGACTIONOBSRESPONSE_H
